#pragma once
#include <queue>
//系统键盘监控
//模拟API函数RegisterHotkey的功能, 直接调用RegisterHotkey的问题是: 如过其他应用程序抢先注册了相同的热键,
//则注册热键实效。
//
//当检测到指定的热键按下时，往指定的窗口发送WM_HOTKEY消息。
struct THotkeyInfo
{
	int  id;
	UINT fsModifiers;
	UINT vk;
	HWND hWnd;//接收WM_HOTKEY消息的窗体
	DWORD dwThreadId;//在hWnd == NULL时, 接收WM_HOTKEY的线程Id。
};

class CHotkeyMonitor
{
public:
	CHotkeyMonitor()
	{

	}

	~CHotkeyMonitor()
	{

	}

	//@Parameters
	///   hWnd, Handle to the window that will receive WM_HOTKEY messages generated by the hot key. 
	//          If this parameter is NULL, WM_HOTKEY messages are posted to the message queue of the calling 
	//	        thread and must be processed in the message loop.
    //    fsModifiers, Specifies the identifier of the hot key
	//    fsModifiers, Specifies keys that must be pressed in combination with the key specified by the uVirtKey parameter in order to generate the WM_HOTKEY message. 
	//    vk, Specifies the virtual-key code of the hot key.
	//@return
	//    If the function succeeds, the return value is nonzero. 
	//    If the function fails, the return value is zero. 

	BOOL MonitorHotKey(HWND hWnd, int id, UINT fsModifiers, UINT vk);



	
protected:
	LRESULT CALLBACK LowLevelKeyboardProc( int nCode,
									  WPARAM wParam,
									  LPARAM lParam
									  );

	
	static std::queue<int>              m_queHotkey     ;
	static std::map<int, THotkeyInfo>   m_mapHotkey     ;//热键标识到热键数据结构的映射
	static HANDLE                       m_hMonitorThread;//线程句柄
	static HANDLE                       m_hHotkeyEvent  ;//热键事件


	static CComAutoCriticalSection m_csForHotkey;


};